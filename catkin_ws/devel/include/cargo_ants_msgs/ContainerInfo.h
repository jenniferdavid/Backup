// Generated by gencpp from file cargo_ants_msgs/ContainerInfo.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_CONTAINERINFO_H
#define CARGO_ANTS_MSGS_MESSAGE_CONTAINERINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct ContainerInfo_
{
  typedef ContainerInfo_<ContainerAllocator> Type;

  ContainerInfo_()
    : state(0)
    , container()
    , vehicle()
    , pickup_x(0.0)
    , pickup_y(0.0)
    , pickup_th(0.0)
    , placedown_x(0.0)
    , placedown_y(0.0)
    , placedown_th(0.0)  {
    }
  ContainerInfo_(const ContainerAllocator& _alloc)
    : state(0)
    , container(_alloc)
    , vehicle(_alloc)
    , pickup_x(0.0)
    , pickup_y(0.0)
    , pickup_th(0.0)
    , placedown_x(0.0)
    , placedown_y(0.0)
    , placedown_th(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _container_type;
  _container_type container;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vehicle_type;
  _vehicle_type vehicle;

   typedef double _pickup_x_type;
  _pickup_x_type pickup_x;

   typedef double _pickup_y_type;
  _pickup_y_type pickup_y;

   typedef double _pickup_th_type;
  _pickup_th_type pickup_th;

   typedef double _placedown_x_type;
  _placedown_x_type placedown_x;

   typedef double _placedown_y_type;
  _placedown_y_type placedown_y;

   typedef double _placedown_th_type;
  _placedown_th_type placedown_th;


    enum { LIFTED = 0u };
     enum { ATTACHED = 1u };
     enum { PLACED = 2u };
     enum { OFFSITE = 3u };
 

  typedef boost::shared_ptr< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ContainerInfo_

typedef ::cargo_ants_msgs::ContainerInfo_<std::allocator<void> > ContainerInfo;

typedef boost::shared_ptr< ::cargo_ants_msgs::ContainerInfo > ContainerInfoPtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::ContainerInfo const> ContainerInfoConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f53848ce479bdf99fcf881223d62e144";
  }

  static const char* value(const ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf53848ce479bdf99ULL;
  static const uint64_t static_value2 = 0xfcf881223d62e144ULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/ContainerInfo";
  }

  static const char* value(const ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 LIFTED=0\n\
uint8 ATTACHED=1\n\
uint8 PLACED=2\n\
uint8 OFFSITE=3\n\
uint8 state\n\
\n\
string container\n\
string vehicle\n\
\n\
float64 pickup_x\n\
float64 pickup_y\n\
float64 pickup_th\n\
\n\
float64 placedown_x\n\
float64 placedown_y\n\
float64 placedown_th\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.container);
      stream.next(m.vehicle);
      stream.next(m.pickup_x);
      stream.next(m.pickup_y);
      stream.next(m.pickup_th);
      stream.next(m.placedown_x);
      stream.next(m.placedown_y);
      stream.next(m.placedown_th);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContainerInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::ContainerInfo_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "container: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.container);
    s << indent << "vehicle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vehicle);
    s << indent << "pickup_x: ";
    Printer<double>::stream(s, indent + "  ", v.pickup_x);
    s << indent << "pickup_y: ";
    Printer<double>::stream(s, indent + "  ", v.pickup_y);
    s << indent << "pickup_th: ";
    Printer<double>::stream(s, indent + "  ", v.pickup_th);
    s << indent << "placedown_x: ";
    Printer<double>::stream(s, indent + "  ", v.placedown_x);
    s << indent << "placedown_y: ";
    Printer<double>::stream(s, indent + "  ", v.placedown_y);
    s << indent << "placedown_th: ";
    Printer<double>::stream(s, indent + "  ", v.placedown_th);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_CONTAINERINFO_H
