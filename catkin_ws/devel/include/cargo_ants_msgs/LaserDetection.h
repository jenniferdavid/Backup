// Generated by gencpp from file cargo_ants_msgs/LaserDetection.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_LASERDETECTION_H
#define CARGO_ANTS_MSGS_MESSAGE_LASERDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cargo_ants_msgs/Point.h>
#include <cargo_ants_msgs/Point.h>
#include <cargo_ants_msgs/Origin.h>
#include <cargo_ants_msgs/Point.h>
#include <cargo_ants_msgs/Polyline.h>
#include <cargo_ants_msgs/Point.h>
#include <cargo_ants_msgs/Point.h>
#include <cargo_ants_msgs/Point.h>

namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct LaserDetection_
{
  typedef LaserDetection_<ContainerAllocator> Type;

  LaserDetection_()
    : single_layer_sensor(false)
    , id(0)
    , detection_frame_id()
    , dynamic(false)
    , num_points(0)
    , index_first(0)
    , index_last(0)
    , point_first()
    , point_last()
    , obj_center()
    , obj_size()
    , polylines()
    , ref_actual()
    , ref_previous()
    , ref_centroid()
    , ref_type(0)  {
    }
  LaserDetection_(const ContainerAllocator& _alloc)
    : single_layer_sensor(false)
    , id(0)
    , detection_frame_id(_alloc)
    , dynamic(false)
    , num_points(0)
    , index_first(0)
    , index_last(0)
    , point_first(_alloc)
    , point_last(_alloc)
    , obj_center(_alloc)
    , obj_size(_alloc)
    , polylines(_alloc)
    , ref_actual(_alloc)
    , ref_previous(_alloc)
    , ref_centroid(_alloc)
    , ref_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _single_layer_sensor_type;
  _single_layer_sensor_type single_layer_sensor;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detection_frame_id_type;
  _detection_frame_id_type detection_frame_id;

   typedef uint8_t _dynamic_type;
  _dynamic_type dynamic;

   typedef int32_t _num_points_type;
  _num_points_type num_points;

   typedef int32_t _index_first_type;
  _index_first_type index_first;

   typedef int32_t _index_last_type;
  _index_last_type index_last;

   typedef  ::cargo_ants_msgs::Point_<ContainerAllocator>  _point_first_type;
  _point_first_type point_first;

   typedef  ::cargo_ants_msgs::Point_<ContainerAllocator>  _point_last_type;
  _point_last_type point_last;

   typedef  ::cargo_ants_msgs::Origin_<ContainerAllocator>  _obj_center_type;
  _obj_center_type obj_center;

   typedef  ::cargo_ants_msgs::Point_<ContainerAllocator>  _obj_size_type;
  _obj_size_type obj_size;

   typedef std::vector< ::cargo_ants_msgs::Polyline_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cargo_ants_msgs::Polyline_<ContainerAllocator> >::other >  _polylines_type;
  _polylines_type polylines;

   typedef  ::cargo_ants_msgs::Point_<ContainerAllocator>  _ref_actual_type;
  _ref_actual_type ref_actual;

   typedef  ::cargo_ants_msgs::Point_<ContainerAllocator>  _ref_previous_type;
  _ref_previous_type ref_previous;

   typedef  ::cargo_ants_msgs::Point_<ContainerAllocator>  _ref_centroid_type;
  _ref_centroid_type ref_centroid;

   typedef int32_t _ref_type_type;
  _ref_type_type ref_type;




  typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> const> ConstPtr;

}; // struct LaserDetection_

typedef ::cargo_ants_msgs::LaserDetection_<std::allocator<void> > LaserDetection;

typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetection > LaserDetectionPtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetection const> LaserDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd2f68d89f76969b5c97cbbecaa26d12";
  }

  static const char* value(const ::cargo_ants_msgs::LaserDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd2f68d89f76969bULL;
  static const uint64_t static_value2 = 0x5c97cbbecaa26d12ULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/LaserDetection";
  }

  static const char* value(const ::cargo_ants_msgs::LaserDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# To be use as OBSTACLE detected in a laser.\n\
\n\
bool single_layer_sensor       # True = single layer sensor (i.e: SICK) - False = multiple layer (i.e: IBEO)\n\
\n\
int32 id                        # number of detection in scan (-1 if unknown)\n\
string detection_frame_id       # frame ID of the sensor from which the detection comes.\n\
\n\
bool dynamic                    # 1 = dynamic object; 0 = not (means that has been associated)\n\
int32 num_points                # number of laser points contained\n\
int32 index_first               # index of the range vector of the first point used? or filteredVector?\n\
int32 index_last                # index of the range vector of the first point used? or filteredVector?\n\
\n\
Point point_first               # first point of the cluster\n\
Point point_last                # first point of the cluster\n\
\n\
Origin obj_center               # Center point of the object bounding box and orientation\n\
Point obj_size                  # X and Y (width and Height) of the object bounding box\n\
Polyline[] polylines            # Set of points defining the Rectangle of the Bounding Box\n\
\n\
Point ref_actual                # point of reference at the moment\n\
Point ref_previous              # previous point of reference (in previous detection)\n\
Point ref_centroid              # reference point to the centroid of the cluster\n\
int32 ref_type                  # reference type in the pre-asso: 8 = corner; 4/2 = line; 1 = centroid;\n\
\n\
\n\
# Line[] lines                    # Vector of Lines in the cluster\n\
# Corners[] corners               # Vector of Corners in the cluster\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Point\n\
float32 px\n\
float32 py\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Origin\n\
float32 ox\n\
float32 oy\n\
float32 oth\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Polyline\n\
# The polyline is walked in a clockwise direction, occupied space is\n\
# to the right of each line segment between two consecutive points.\n\
# In case the polyline is a polygon, the first point is repeated as\n\
# the last point.\n\
\n\
Point[] points\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::LaserDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.single_layer_sensor);
      stream.next(m.id);
      stream.next(m.detection_frame_id);
      stream.next(m.dynamic);
      stream.next(m.num_points);
      stream.next(m.index_first);
      stream.next(m.index_last);
      stream.next(m.point_first);
      stream.next(m.point_last);
      stream.next(m.obj_center);
      stream.next(m.obj_size);
      stream.next(m.polylines);
      stream.next(m.ref_actual);
      stream.next(m.ref_previous);
      stream.next(m.ref_centroid);
      stream.next(m.ref_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::LaserDetection_<ContainerAllocator>& v)
  {
    s << indent << "single_layer_sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.single_layer_sensor);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "detection_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detection_frame_id);
    s << indent << "dynamic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dynamic);
    s << indent << "num_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_points);
    s << indent << "index_first: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_first);
    s << indent << "index_last: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_last);
    s << indent << "point_first: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point_first);
    s << indent << "point_last: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point_last);
    s << indent << "obj_center: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Origin_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_center);
    s << indent << "obj_size: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_size);
    s << indent << "polylines[]" << std::endl;
    for (size_t i = 0; i < v.polylines.size(); ++i)
    {
      s << indent << "  polylines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cargo_ants_msgs::Polyline_<ContainerAllocator> >::stream(s, indent + "    ", v.polylines[i]);
    }
    s << indent << "ref_actual: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ref_actual);
    s << indent << "ref_previous: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ref_previous);
    s << indent << "ref_centroid: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ref_centroid);
    s << indent << "ref_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ref_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_LASERDETECTION_H
