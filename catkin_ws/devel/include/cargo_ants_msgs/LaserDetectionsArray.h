// Generated by gencpp from file cargo_ants_msgs/LaserDetectionsArray.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_LASERDETECTIONSARRAY_H
#define CARGO_ANTS_MSGS_MESSAGE_LASERDETECTIONSARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cargo_ants_msgs/LaserDetection.h>

namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct LaserDetectionsArray_
{
  typedef LaserDetectionsArray_<ContainerAllocator> Type;

  LaserDetectionsArray_()
    : header()
    , laser_detections()
    , num_detections(0)  {
    }
  LaserDetectionsArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , laser_detections(_alloc)
    , num_detections(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >::other >  _laser_detections_type;
  _laser_detections_type laser_detections;

   typedef int32_t _num_detections_type;
  _num_detections_type num_detections;




  typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> const> ConstPtr;

}; // struct LaserDetectionsArray_

typedef ::cargo_ants_msgs::LaserDetectionsArray_<std::allocator<void> > LaserDetectionsArray;

typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetectionsArray > LaserDetectionsArrayPtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::LaserDetectionsArray const> LaserDetectionsArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce02bdd5be7bd901a891185084e00010";
  }

  static const char* value(const ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce02bdd5be7bd901ULL;
  static const uint64_t static_value2 = 0xa891185084e00010ULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/LaserDetectionsArray";
  }

  static const char* value(const ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Array of all the objects detected from a single layer laser sensor.\n\
# UNDER CONSTRUCTION\n\
\n\
Header header 			# Timestamp, frame id\n\
LaserDetection[] laser_detections   # Set of targets being tracked\n\
int32 num_detections\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/LaserDetection\n\
# To be use as OBSTACLE detected in a laser.\n\
\n\
bool single_layer_sensor       # True = single layer sensor (i.e: SICK) - False = multiple layer (i.e: IBEO)\n\
\n\
int32 id                        # number of detection in scan (-1 if unknown)\n\
string detection_frame_id       # frame ID of the sensor from which the detection comes.\n\
\n\
bool dynamic                    # 1 = dynamic object; 0 = not (means that has been associated)\n\
int32 num_points                # number of laser points contained\n\
int32 index_first               # index of the range vector of the first point used? or filteredVector?\n\
int32 index_last                # index of the range vector of the first point used? or filteredVector?\n\
\n\
Point point_first               # first point of the cluster\n\
Point point_last                # first point of the cluster\n\
\n\
Origin obj_center               # Center point of the object bounding box and orientation\n\
Point obj_size                  # X and Y (width and Height) of the object bounding box\n\
Polyline[] polylines            # Set of points defining the Rectangle of the Bounding Box\n\
\n\
Point ref_actual                # point of reference at the moment\n\
Point ref_previous              # previous point of reference (in previous detection)\n\
Point ref_centroid              # reference point to the centroid of the cluster\n\
int32 ref_type                  # reference type in the pre-asso: 8 = corner; 4/2 = line; 1 = centroid;\n\
\n\
\n\
# Line[] lines                    # Vector of Lines in the cluster\n\
# Corners[] corners               # Vector of Corners in the cluster\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Point\n\
float32 px\n\
float32 py\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Origin\n\
float32 ox\n\
float32 oy\n\
float32 oth\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Polyline\n\
# The polyline is walked in a clockwise direction, occupied space is\n\
# to the right of each line segment between two consecutive points.\n\
# In case the polyline is a polygon, the first point is repeated as\n\
# the last point.\n\
\n\
Point[] points\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.laser_detections);
      stream.next(m.num_detections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserDetectionsArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::LaserDetectionsArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "laser_detections[]" << std::endl;
    for (size_t i = 0; i < v.laser_detections.size(); ++i)
    {
      s << indent << "  laser_detections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cargo_ants_msgs::LaserDetection_<ContainerAllocator> >::stream(s, indent + "    ", v.laser_detections[i]);
    }
    s << indent << "num_detections: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_detections);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_LASERDETECTIONSARRAY_H
