// Generated by gencpp from file cargo_ants_msgs/ObjectTrackAtSdf.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_OBJECTTRACKATSDF_H
#define CARGO_ANTS_MSGS_MESSAGE_OBJECTTRACKATSDF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct ObjectTrackAtSdf_
{
  typedef ObjectTrackAtSdf_<ContainerAllocator> Type;

  ObjectTrackAtSdf_()
    : id(0)
    , class_id(0)
    , position()
    , velocity()
    , heading(0.0)
    , covariance()  {
      covariance.assign(0.0);
  }
  ObjectTrackAtSdf_(const ContainerAllocator& _alloc)
    : id(0)
    , class_id(0)
    , position(_alloc)
    , velocity(_alloc)
    , heading(0.0)
    , covariance()  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _heading_type;
  _heading_type heading;

   typedef boost::array<double, 4>  _covariance_type;
  _covariance_type covariance;


    enum { UNDETERMINED = 0 };
     enum { CAR = 1 };
     enum { MOTORCYCLE = 2 };
     enum { TRUCK = 3 };
     enum { PEDESTRIAN = 4 };
     enum { POLE = 5 };
     enum { TREE = 6 };
     enum { ANIMAL = 7 };
     enum { GOD = 8 };
     enum { BICYLCE = 9 };
     enum { OTHERS = 10 };
 

  typedef boost::shared_ptr< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectTrackAtSdf_

typedef ::cargo_ants_msgs::ObjectTrackAtSdf_<std::allocator<void> > ObjectTrackAtSdf;

typedef boost::shared_ptr< ::cargo_ants_msgs::ObjectTrackAtSdf > ObjectTrackAtSdfPtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::ObjectTrackAtSdf const> ObjectTrackAtSdfConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f293dd0b67983516c3df559784fc1d67";
  }

  static const char* value(const ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf293dd0b67983516ULL;
  static const uint64_t static_value2 = 0xc3df559784fc1d67ULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/ObjectTrackAtSdf";
  }

  static const char* value(const ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Single object track from SDF UDP message (Volvo, AT)\n\
# Result of internal datafusion made by Volvo AutoBox SW, which uses ibeo and radars\n\
\n\
\n\
int32 id 			#track id\n\
int32 class_id		#class id of the track:\n\
int32 UNDETERMINED 		= 0\n\
int32 CAR 				= 1\n\
int32 MOTORCYCLE		= 2\n\
int32 TRUCK 			= 3\n\
int32 PEDESTRIAN 		= 4\n\
int32 POLE				= 5\n\
int32 TREE 				= 6\n\
int32 ANIMAL			= 7\n\
int32 GOD				= 8\n\
int32 BICYLCE			= 9\n\
int32 OTHERS			= 10  #unidentified vehicle, piano, speed limit sign, x-sign, ... \n\
\n\
geometry_msgs/Point position 	#Track position (x,y) [m]\n\
geometry_msgs/Point velocity 	#Track velocity (vx,vy) [m/s]\n\
float64 heading 				#Track heading [rad] \n\
float64[4] covariance			#XY covariance matrix [m2/s2]\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.class_id);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.heading);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectTrackAtSdf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::ObjectTrackAtSdf_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_OBJECTTRACKATSDF_H
