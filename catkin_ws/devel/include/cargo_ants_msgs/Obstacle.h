// Generated by gencpp from file cargo_ants_msgs/Obstacle.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_OBSTACLE_H
#define CARGO_ANTS_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cargo_ants_msgs/Origin.h>
#include <cargo_ants_msgs/Polyline.h>

namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : type_tag(0)
    , origin()
    , polylines()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : type_tag(0)
    , origin(_alloc)
    , polylines(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _type_tag_type;
  _type_tag_type type_tag;

   typedef  ::cargo_ants_msgs::Origin_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef std::vector< ::cargo_ants_msgs::Polyline_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cargo_ants_msgs::Polyline_<ContainerAllocator> >::other >  _polylines_type;
  _polylines_type polylines;


    enum { UNKNOWN = 0u };
     enum { CONTAINER = 1u };
 

  typedef boost::shared_ptr< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::cargo_ants_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::cargo_ants_msgs::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adf07ee58e74a1fe6d8135061989c6e5";
  }

  static const char* value(const ::cargo_ants_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadf07ee58e74a1feULL;
  static const uint64_t static_value2 = 0x6d8135061989c6e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/Obstacle";
  }

  static const char* value(const ::cargo_ants_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 UNKNOWN=0\n\
uint32 CONTAINER=1\n\
uint32 type_tag\n\
\n\
Origin origin\n\
Polyline[] polylines\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Origin\n\
float32 ox\n\
float32 oy\n\
float32 oth\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Polyline\n\
# The polyline is walked in a clockwise direction, occupied space is\n\
# to the right of each line segment between two consecutive points.\n\
# In case the polyline is a polygon, the first point is repeated as\n\
# the last point.\n\
\n\
Point[] points\n\
\n\
================================================================================\n\
MSG: cargo_ants_msgs/Point\n\
float32 px\n\
float32 py\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type_tag);
      stream.next(m.origin);
      stream.next(m.polylines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "type_tag: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type_tag);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::cargo_ants_msgs::Origin_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "polylines[]" << std::endl;
    for (size_t i = 0; i < v.polylines.size(); ++i)
    {
      s << indent << "  polylines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cargo_ants_msgs::Polyline_<ContainerAllocator> >::stream(s, indent + "    ", v.polylines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_OBSTACLE_H
