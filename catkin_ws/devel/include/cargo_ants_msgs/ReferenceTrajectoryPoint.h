// Generated by gencpp from file cargo_ants_msgs/ReferenceTrajectoryPoint.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_REFERENCETRAJECTORYPOINT_H
#define CARGO_ANTS_MSGS_MESSAGE_REFERENCETRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct ReferenceTrajectoryPoint_
{
  typedef ReferenceTrajectoryPoint_<ContainerAllocator> Type;

  ReferenceTrajectoryPoint_()
    : xx(0.0)
    , yy(0.0)
    , th(0.0)
    , xd(0.0)
    , yd(0.0)
    , thd(0.0)
    , xdd(0.0)
    , ydd(0.0)
    , thdd(0.0)  {
    }
  ReferenceTrajectoryPoint_(const ContainerAllocator& _alloc)
    : xx(0.0)
    , yy(0.0)
    , th(0.0)
    , xd(0.0)
    , yd(0.0)
    , thd(0.0)
    , xdd(0.0)
    , ydd(0.0)
    , thdd(0.0)  {
  (void)_alloc;
    }



   typedef float _xx_type;
  _xx_type xx;

   typedef float _yy_type;
  _yy_type yy;

   typedef float _th_type;
  _th_type th;

   typedef float _xd_type;
  _xd_type xd;

   typedef float _yd_type;
  _yd_type yd;

   typedef float _thd_type;
  _thd_type thd;

   typedef float _xdd_type;
  _xdd_type xdd;

   typedef float _ydd_type;
  _ydd_type ydd;

   typedef float _thdd_type;
  _thdd_type thdd;




  typedef boost::shared_ptr< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct ReferenceTrajectoryPoint_

typedef ::cargo_ants_msgs::ReferenceTrajectoryPoint_<std::allocator<void> > ReferenceTrajectoryPoint;

typedef boost::shared_ptr< ::cargo_ants_msgs::ReferenceTrajectoryPoint > ReferenceTrajectoryPointPtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::ReferenceTrajectoryPoint const> ReferenceTrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60014944571a3abc70dee1ab6a3c83b0";
  }

  static const char* value(const ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60014944571a3abcULL;
  static const uint64_t static_value2 = 0x70dee1ab6a3c83b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/ReferenceTrajectoryPoint";
  }

  static const char* value(const ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xx\n\
float32 yy\n\
float32 th\n\
float32 xd\n\
float32 yd\n\
float32 thd\n\
float32 xdd\n\
float32 ydd\n\
float32 thdd\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xx);
      stream.next(m.yy);
      stream.next(m.th);
      stream.next(m.xd);
      stream.next(m.yd);
      stream.next(m.thd);
      stream.next(m.xdd);
      stream.next(m.ydd);
      stream.next(m.thdd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReferenceTrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::ReferenceTrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "xx: ";
    Printer<float>::stream(s, indent + "  ", v.xx);
    s << indent << "yy: ";
    Printer<float>::stream(s, indent + "  ", v.yy);
    s << indent << "th: ";
    Printer<float>::stream(s, indent + "  ", v.th);
    s << indent << "xd: ";
    Printer<float>::stream(s, indent + "  ", v.xd);
    s << indent << "yd: ";
    Printer<float>::stream(s, indent + "  ", v.yd);
    s << indent << "thd: ";
    Printer<float>::stream(s, indent + "  ", v.thd);
    s << indent << "xdd: ";
    Printer<float>::stream(s, indent + "  ", v.xdd);
    s << indent << "ydd: ";
    Printer<float>::stream(s, indent + "  ", v.ydd);
    s << indent << "thdd: ";
    Printer<float>::stream(s, indent + "  ", v.thdd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_REFERENCETRAJECTORYPOINT_H
