// Generated by gencpp from file cargo_ants_msgs/VehicleInfo.msg
// DO NOT EDIT!


#ifndef CARGO_ANTS_MSGS_MESSAGE_VEHICLEINFO_H
#define CARGO_ANTS_MSGS_MESSAGE_VEHICLEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cargo_ants_msgs
{
template <class ContainerAllocator>
struct VehicleInfo_
{
  typedef VehicleInfo_<ContainerAllocator> Type;

  VehicleInfo_()
    : mode(0)
    , vehicle()
    , container()
    , vehicle_px(0.0)
    , vehicle_py(0.0)
    , vehicle_pth(0.0)  {
    }
  VehicleInfo_(const ContainerAllocator& _alloc)
    : mode(0)
    , vehicle(_alloc)
    , container(_alloc)
    , vehicle_px(0.0)
    , vehicle_py(0.0)
    , vehicle_pth(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vehicle_type;
  _vehicle_type vehicle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _container_type;
  _container_type container;

   typedef double _vehicle_px_type;
  _vehicle_px_type vehicle_px;

   typedef double _vehicle_py_type;
  _vehicle_py_type vehicle_py;

   typedef double _vehicle_pth_type;
  _vehicle_pth_type vehicle_pth;


    enum { PICKING = 0u };
     enum { PLACING = 1u };
     enum { IDLE = 2u };
     enum { ERROR = 3u };
 

  typedef boost::shared_ptr< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleInfo_

typedef ::cargo_ants_msgs::VehicleInfo_<std::allocator<void> > VehicleInfo;

typedef boost::shared_ptr< ::cargo_ants_msgs::VehicleInfo > VehicleInfoPtr;
typedef boost::shared_ptr< ::cargo_ants_msgs::VehicleInfo const> VehicleInfoConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cargo_ants_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'cargo_ants_msgs': ['/home/jendav/catkin_ws/src/code/cargo-ants-ros-pkgs/cargo_ants_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d9b3ce8e3717d2dabbb463d43c9608c";
  }

  static const char* value(const ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d9b3ce8e3717d2dULL;
  static const uint64_t static_value2 = 0xabbb463d43c9608cULL;
};

template<class ContainerAllocator>
struct DataType< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cargo_ants_msgs/VehicleInfo";
  }

  static const char* value(const ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PICKING=0\n\
uint8 PLACING=1\n\
uint8 IDLE=2\n\
uint8 ERROR=3\n\
uint8 mode\n\
\n\
string vehicle\n\
string container\n\
\n\
float64 vehicle_px\n\
float64 vehicle_py\n\
float64 vehicle_pth\n\
";
  }

  static const char* value(const ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.vehicle);
      stream.next(m.container);
      stream.next(m.vehicle_px);
      stream.next(m.vehicle_py);
      stream.next(m.vehicle_pth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cargo_ants_msgs::VehicleInfo_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "vehicle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vehicle);
    s << indent << "container: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.container);
    s << indent << "vehicle_px: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_px);
    s << indent << "vehicle_py: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_py);
    s << indent << "vehicle_pth: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_pth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARGO_ANTS_MSGS_MESSAGE_VEHICLEINFO_H
