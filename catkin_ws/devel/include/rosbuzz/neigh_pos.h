// Generated by gencpp from file rosbuzz/neigh_pos.msg
// DO NOT EDIT!


#ifndef ROSBUZZ_MESSAGE_NEIGH_POS_H
#define ROSBUZZ_MESSAGE_NEIGH_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/NavSatFix.h>

namespace rosbuzz
{
template <class ContainerAllocator>
struct neigh_pos_
{
  typedef neigh_pos_<ContainerAllocator> Type;

  neigh_pos_()
    : header()
    , pos_neigh()  {
    }
  neigh_pos_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos_neigh(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::sensor_msgs::NavSatFix_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::NavSatFix_<ContainerAllocator> >::other >  _pos_neigh_type;
  _pos_neigh_type pos_neigh;




  typedef boost::shared_ptr< ::rosbuzz::neigh_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbuzz::neigh_pos_<ContainerAllocator> const> ConstPtr;

}; // struct neigh_pos_

typedef ::rosbuzz::neigh_pos_<std::allocator<void> > neigh_pos;

typedef boost::shared_ptr< ::rosbuzz::neigh_pos > neigh_posPtr;
typedef boost::shared_ptr< ::rosbuzz::neigh_pos const> neigh_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosbuzz::neigh_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosbuzz::neigh_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosbuzz

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'rosbuzz': ['/home/jendav/catkin_ws/src/code/rosbuzz/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosbuzz::neigh_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbuzz::neigh_pos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbuzz::neigh_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbuzz::neigh_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbuzz::neigh_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbuzz::neigh_pos_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosbuzz::neigh_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "450833f82a04595d06d2c1f4242fa709";
  }

  static const char* value(const ::rosbuzz::neigh_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x450833f82a04595dULL;
  static const uint64_t static_value2 = 0x06d2c1f4242fa709ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbuzz::neigh_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosbuzz/neigh_pos";
  }

  static const char* value(const ::rosbuzz::neigh_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosbuzz::neigh_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
sensor_msgs/NavSatFix[] pos_neigh\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/NavSatFix\n\
# Navigation Satellite fix for any Global Navigation Satellite System\n\
#\n\
# Specified using the WGS 84 reference ellipsoid\n\
\n\
# header.stamp specifies the ROS time for this measurement (the\n\
#        corresponding satellite time may be reported using the\n\
#        sensor_msgs/TimeReference message).\n\
#\n\
# header.frame_id is the frame of reference reported by the satellite\n\
#        receiver, usually the location of the antenna.  This is a\n\
#        Euclidean frame relative to the vehicle, not a reference\n\
#        ellipsoid.\n\
Header header\n\
\n\
# satellite fix status information\n\
NavSatStatus status\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south.\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid\n\
# (quiet NaN if no altitude is available).\n\
float64 altitude\n\
\n\
# Position covariance [m^2] defined relative to a tangential plane\n\
# through the reported position. The components are East, North, and\n\
# Up (ENU), in row-major order.\n\
#\n\
# Beware: this coordinate system exhibits singularities at the poles.\n\
\n\
float64[9] position_covariance\n\
\n\
# If the covariance of the fix is known, fill it in completely. If the\n\
# GPS receiver provides the variance of each measurement, put them\n\
# along the diagonal. If only Dilution of Precision is available,\n\
# estimate an approximate covariance from that.\n\
\n\
uint8 COVARIANCE_TYPE_UNKNOWN = 0\n\
uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n\
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n\
uint8 COVARIANCE_TYPE_KNOWN = 3\n\
\n\
uint8 position_covariance_type\n\
\n\
================================================================================\n\
MSG: sensor_msgs/NavSatStatus\n\
# Navigation Satellite fix status for any Global Navigation Satellite System\n\
\n\
# Whether to output an augmented fix is determined by both the fix\n\
# type and the last time differential corrections were received.  A\n\
# fix is valid when status >= STATUS_FIX.\n\
\n\
int8 STATUS_NO_FIX =  -1        # unable to fix position\n\
int8 STATUS_FIX =      0        # unaugmented fix\n\
int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n\
int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\
\n\
int8 status\n\
\n\
# Bits defining which Global Navigation Satellite System signals were\n\
# used by the receiver.\n\
\n\
uint16 SERVICE_GPS =     1\n\
uint16 SERVICE_GLONASS = 2\n\
uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n\
uint16 SERVICE_GALILEO = 8\n\
\n\
uint16 service\n\
";
  }

  static const char* value(const ::rosbuzz::neigh_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosbuzz::neigh_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos_neigh);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct neigh_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbuzz::neigh_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosbuzz::neigh_pos_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_neigh[]" << std::endl;
    for (size_t i = 0; i < v.pos_neigh.size(); ++i)
    {
      s << indent << "  pos_neigh[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::NavSatFix_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_neigh[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSBUZZ_MESSAGE_NEIGH_POS_H
