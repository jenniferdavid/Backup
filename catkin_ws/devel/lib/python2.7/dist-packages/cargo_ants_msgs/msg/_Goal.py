# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/Goal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Goal(genpy.Message):
  _md5sum = "7d179dcde16d513612781bb1500d9250"
  _type = "cargo_ants_msgs/Goal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A goal is specified as its (gx,gy) coordinate and heading gth (for
# "goal theta"). Additionally, dr is the radial tolerance, and dth the
# angular tolerance to be achieved. Specifying a negative number for
# either dr or dth disabled that particular tolerance. Thus, if you do
# no care about the heading with which you arrive at a goal, specify
# dth = -1 for example.  The goal message type is intended to be used
# as part of other messages such as Path.msg, thus we do not include
# the frame here as that should be the same for an entire array of
# goals.

float64 gx
float64 gy
float64 gth

# Radial accuracy of the goal. Specifying dr <= 0.0 means that you do
# not care about the goal position at all.
#
float64 dr

# Angular accuracy of the goal. Specifying dth <= 0.0 or >= M_PI means
# that orientation does not matter.
#
float64 dth


#later? bool go_forward
"""
  __slots__ = ['gx','gy','gth','dr','dth']
  _slot_types = ['float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gx,gy,gth,dr,dth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Goal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gx is None:
        self.gx = 0.
      if self.gy is None:
        self.gy = 0.
      if self.gth is None:
        self.gth = 0.
      if self.dr is None:
        self.dr = 0.
      if self.dth is None:
        self.dth = 0.
    else:
      self.gx = 0.
      self.gy = 0.
      self.gth = 0.
      self.dr = 0.
      self.dth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5d.pack(_x.gx, _x.gy, _x.gth, _x.dr, _x.dth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.gx, _x.gy, _x.gth, _x.dr, _x.dth,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5d.pack(_x.gx, _x.gy, _x.gth, _x.dr, _x.dth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.gx, _x.gy, _x.gth, _x.dr, _x.dth,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5d = struct.Struct("<5d")
