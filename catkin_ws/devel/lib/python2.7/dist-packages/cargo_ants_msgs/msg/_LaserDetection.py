# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/LaserDetection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cargo_ants_msgs.msg

class LaserDetection(genpy.Message):
  _md5sum = "dd2f68d89f76969b5c97cbbecaa26d12"
  _type = "cargo_ants_msgs/LaserDetection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# To be use as OBSTACLE detected in a laser.

bool single_layer_sensor       # True = single layer sensor (i.e: SICK) - False = multiple layer (i.e: IBEO)

int32 id                        # number of detection in scan (-1 if unknown)
string detection_frame_id       # frame ID of the sensor from which the detection comes.

bool dynamic                    # 1 = dynamic object; 0 = not (means that has been associated)
int32 num_points                # number of laser points contained
int32 index_first               # index of the range vector of the first point used? or filteredVector?
int32 index_last                # index of the range vector of the first point used? or filteredVector?

Point point_first               # first point of the cluster
Point point_last                # first point of the cluster

Origin obj_center               # Center point of the object bounding box and orientation
Point obj_size                  # X and Y (width and Height) of the object bounding box
Polyline[] polylines            # Set of points defining the Rectangle of the Bounding Box

Point ref_actual                # point of reference at the moment
Point ref_previous              # previous point of reference (in previous detection)
Point ref_centroid              # reference point to the centroid of the cluster
int32 ref_type                  # reference type in the pre-asso: 8 = corner; 4/2 = line; 1 = centroid;


# Line[] lines                    # Vector of Lines in the cluster
# Corners[] corners               # Vector of Corners in the cluster

================================================================================
MSG: cargo_ants_msgs/Point
float32 px
float32 py

================================================================================
MSG: cargo_ants_msgs/Origin
float32 ox
float32 oy
float32 oth

================================================================================
MSG: cargo_ants_msgs/Polyline
# The polyline is walked in a clockwise direction, occupied space is
# to the right of each line segment between two consecutive points.
# In case the polyline is a polygon, the first point is repeated as
# the last point.

Point[] points
"""
  __slots__ = ['single_layer_sensor','id','detection_frame_id','dynamic','num_points','index_first','index_last','point_first','point_last','obj_center','obj_size','polylines','ref_actual','ref_previous','ref_centroid','ref_type']
  _slot_types = ['bool','int32','string','bool','int32','int32','int32','cargo_ants_msgs/Point','cargo_ants_msgs/Point','cargo_ants_msgs/Origin','cargo_ants_msgs/Point','cargo_ants_msgs/Polyline[]','cargo_ants_msgs/Point','cargo_ants_msgs/Point','cargo_ants_msgs/Point','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       single_layer_sensor,id,detection_frame_id,dynamic,num_points,index_first,index_last,point_first,point_last,obj_center,obj_size,polylines,ref_actual,ref_previous,ref_centroid,ref_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaserDetection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.single_layer_sensor is None:
        self.single_layer_sensor = False
      if self.id is None:
        self.id = 0
      if self.detection_frame_id is None:
        self.detection_frame_id = ''
      if self.dynamic is None:
        self.dynamic = False
      if self.num_points is None:
        self.num_points = 0
      if self.index_first is None:
        self.index_first = 0
      if self.index_last is None:
        self.index_last = 0
      if self.point_first is None:
        self.point_first = cargo_ants_msgs.msg.Point()
      if self.point_last is None:
        self.point_last = cargo_ants_msgs.msg.Point()
      if self.obj_center is None:
        self.obj_center = cargo_ants_msgs.msg.Origin()
      if self.obj_size is None:
        self.obj_size = cargo_ants_msgs.msg.Point()
      if self.polylines is None:
        self.polylines = []
      if self.ref_actual is None:
        self.ref_actual = cargo_ants_msgs.msg.Point()
      if self.ref_previous is None:
        self.ref_previous = cargo_ants_msgs.msg.Point()
      if self.ref_centroid is None:
        self.ref_centroid = cargo_ants_msgs.msg.Point()
      if self.ref_type is None:
        self.ref_type = 0
    else:
      self.single_layer_sensor = False
      self.id = 0
      self.detection_frame_id = ''
      self.dynamic = False
      self.num_points = 0
      self.index_first = 0
      self.index_last = 0
      self.point_first = cargo_ants_msgs.msg.Point()
      self.point_last = cargo_ants_msgs.msg.Point()
      self.obj_center = cargo_ants_msgs.msg.Origin()
      self.obj_size = cargo_ants_msgs.msg.Point()
      self.polylines = []
      self.ref_actual = cargo_ants_msgs.msg.Point()
      self.ref_previous = cargo_ants_msgs.msg.Point()
      self.ref_centroid = cargo_ants_msgs.msg.Point()
      self.ref_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bi.pack(_x.single_layer_sensor, _x.id))
      _x = self.detection_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3i9f.pack(_x.dynamic, _x.num_points, _x.index_first, _x.index_last, _x.point_first.px, _x.point_first.py, _x.point_last.px, _x.point_last.py, _x.obj_center.ox, _x.obj_center.oy, _x.obj_center.oth, _x.obj_size.px, _x.obj_size.py))
      length = len(self.polylines)
      buff.write(_struct_I.pack(length))
      for val1 in self.polylines:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_2f.pack(_x.px, _x.py))
      _x = self
      buff.write(_struct_6fi.pack(_x.ref_actual.px, _x.ref_actual.py, _x.ref_previous.px, _x.ref_previous.py, _x.ref_centroid.px, _x.ref_centroid.py, _x.ref_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point_first is None:
        self.point_first = cargo_ants_msgs.msg.Point()
      if self.point_last is None:
        self.point_last = cargo_ants_msgs.msg.Point()
      if self.obj_center is None:
        self.obj_center = cargo_ants_msgs.msg.Origin()
      if self.obj_size is None:
        self.obj_size = cargo_ants_msgs.msg.Point()
      if self.polylines is None:
        self.polylines = None
      if self.ref_actual is None:
        self.ref_actual = cargo_ants_msgs.msg.Point()
      if self.ref_previous is None:
        self.ref_previous = cargo_ants_msgs.msg.Point()
      if self.ref_centroid is None:
        self.ref_centroid = cargo_ants_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.single_layer_sensor, _x.id,) = _struct_Bi.unpack(str[start:end])
      self.single_layer_sensor = bool(self.single_layer_sensor)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detection_frame_id = str[start:end].decode('utf-8')
      else:
        self.detection_frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.dynamic, _x.num_points, _x.index_first, _x.index_last, _x.point_first.px, _x.point_first.py, _x.point_last.px, _x.point_last.py, _x.obj_center.ox, _x.obj_center.oy, _x.obj_center.oth, _x.obj_size.px, _x.obj_size.py,) = _struct_B3i9f.unpack(str[start:end])
      self.dynamic = bool(self.dynamic)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polylines = []
      for i in range(0, length):
        val1 = cargo_ants_msgs.msg.Polyline()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = cargo_ants_msgs.msg.Point()
          _x = val2
          start = end
          end += 8
          (_x.px, _x.py,) = _struct_2f.unpack(str[start:end])
          val1.points.append(val2)
        self.polylines.append(val1)
      _x = self
      start = end
      end += 28
      (_x.ref_actual.px, _x.ref_actual.py, _x.ref_previous.px, _x.ref_previous.py, _x.ref_centroid.px, _x.ref_centroid.py, _x.ref_type,) = _struct_6fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bi.pack(_x.single_layer_sensor, _x.id))
      _x = self.detection_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3i9f.pack(_x.dynamic, _x.num_points, _x.index_first, _x.index_last, _x.point_first.px, _x.point_first.py, _x.point_last.px, _x.point_last.py, _x.obj_center.ox, _x.obj_center.oy, _x.obj_center.oth, _x.obj_size.px, _x.obj_size.py))
      length = len(self.polylines)
      buff.write(_struct_I.pack(length))
      for val1 in self.polylines:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_2f.pack(_x.px, _x.py))
      _x = self
      buff.write(_struct_6fi.pack(_x.ref_actual.px, _x.ref_actual.py, _x.ref_previous.px, _x.ref_previous.py, _x.ref_centroid.px, _x.ref_centroid.py, _x.ref_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point_first is None:
        self.point_first = cargo_ants_msgs.msg.Point()
      if self.point_last is None:
        self.point_last = cargo_ants_msgs.msg.Point()
      if self.obj_center is None:
        self.obj_center = cargo_ants_msgs.msg.Origin()
      if self.obj_size is None:
        self.obj_size = cargo_ants_msgs.msg.Point()
      if self.polylines is None:
        self.polylines = None
      if self.ref_actual is None:
        self.ref_actual = cargo_ants_msgs.msg.Point()
      if self.ref_previous is None:
        self.ref_previous = cargo_ants_msgs.msg.Point()
      if self.ref_centroid is None:
        self.ref_centroid = cargo_ants_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.single_layer_sensor, _x.id,) = _struct_Bi.unpack(str[start:end])
      self.single_layer_sensor = bool(self.single_layer_sensor)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detection_frame_id = str[start:end].decode('utf-8')
      else:
        self.detection_frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.dynamic, _x.num_points, _x.index_first, _x.index_last, _x.point_first.px, _x.point_first.py, _x.point_last.px, _x.point_last.py, _x.obj_center.ox, _x.obj_center.oy, _x.obj_center.oth, _x.obj_size.px, _x.obj_size.py,) = _struct_B3i9f.unpack(str[start:end])
      self.dynamic = bool(self.dynamic)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polylines = []
      for i in range(0, length):
        val1 = cargo_ants_msgs.msg.Polyline()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = cargo_ants_msgs.msg.Point()
          _x = val2
          start = end
          end += 8
          (_x.px, _x.py,) = _struct_2f.unpack(str[start:end])
          val1.points.append(val2)
        self.polylines.append(val1)
      _x = self
      start = end
      end += 28
      (_x.ref_actual.px, _x.ref_actual.py, _x.ref_previous.px, _x.ref_previous.py, _x.ref_centroid.px, _x.ref_centroid.py, _x.ref_type,) = _struct_6fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B3i9f = struct.Struct("<B3i9f")
_struct_Bi = struct.Struct("<Bi")
_struct_2f = struct.Struct("<2f")
_struct_6fi = struct.Struct("<6fi")
