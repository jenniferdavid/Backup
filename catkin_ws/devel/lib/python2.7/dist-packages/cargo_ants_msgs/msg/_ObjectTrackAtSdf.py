# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/ObjectTrackAtSdf.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ObjectTrackAtSdf(genpy.Message):
  _md5sum = "f293dd0b67983516c3df559784fc1d67"
  _type = "cargo_ants_msgs/ObjectTrackAtSdf"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Single object track from SDF UDP message (Volvo, AT)
# Result of internal datafusion made by Volvo AutoBox SW, which uses ibeo and radars


int32 id 			#track id
int32 class_id		#class id of the track:
int32 UNDETERMINED 		= 0
int32 CAR 				= 1
int32 MOTORCYCLE		= 2
int32 TRUCK 			= 3
int32 PEDESTRIAN 		= 4
int32 POLE				= 5
int32 TREE 				= 6
int32 ANIMAL			= 7
int32 GOD				= 8
int32 BICYLCE			= 9
int32 OTHERS			= 10  #unidentified vehicle, piano, speed limit sign, x-sign, ... 

geometry_msgs/Point position 	#Track position (x,y) [m]
geometry_msgs/Point velocity 	#Track velocity (vx,vy) [m/s]
float64 heading 				#Track heading [rad] 
float64[4] covariance			#XY covariance matrix [m2/s2]

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  UNDETERMINED = 0
  CAR = 1
  MOTORCYCLE = 2
  TRUCK = 3
  PEDESTRIAN = 4
  POLE = 5
  TREE = 6
  ANIMAL = 7
  GOD = 8
  BICYLCE = 9
  OTHERS = 10

  __slots__ = ['id','class_id','position','velocity','heading','covariance']
  _slot_types = ['int32','int32','geometry_msgs/Point','geometry_msgs/Point','float64','float64[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,class_id,position,velocity,heading,covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectTrackAtSdf, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.class_id is None:
        self.class_id = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Point()
      if self.heading is None:
        self.heading = 0.
      if self.covariance is None:
        self.covariance = [0.,0.,0.,0.]
    else:
      self.id = 0
      self.class_id = 0
      self.position = geometry_msgs.msg.Point()
      self.velocity = geometry_msgs.msg.Point()
      self.heading = 0.
      self.covariance = [0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i7d.pack(_x.id, _x.class_id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.heading))
      buff.write(_struct_4d.pack(*self.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.id, _x.class_id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.heading,) = _struct_2i7d.unpack(str[start:end])
      start = end
      end += 32
      self.covariance = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i7d.pack(_x.id, _x.class_id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.heading))
      buff.write(self.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.id, _x.class_id, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.heading,) = _struct_2i7d.unpack(str[start:end])
      start = end
      end += 32
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_2i7d = struct.Struct("<2i7d")
