# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/Obstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cargo_ants_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "adf07ee58e74a1fe6d8135061989c6e5"
  _type = "cargo_ants_msgs/Obstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 UNKNOWN=0
uint32 CONTAINER=1
uint32 type_tag

Origin origin
Polyline[] polylines

================================================================================
MSG: cargo_ants_msgs/Origin
float32 ox
float32 oy
float32 oth

================================================================================
MSG: cargo_ants_msgs/Polyline
# The polyline is walked in a clockwise direction, occupied space is
# to the right of each line segment between two consecutive points.
# In case the polyline is a polygon, the first point is repeated as
# the last point.

Point[] points

================================================================================
MSG: cargo_ants_msgs/Point
float32 px
float32 py
"""
  # Pseudo-constants
  UNKNOWN = 0
  CONTAINER = 1

  __slots__ = ['type_tag','origin','polylines']
  _slot_types = ['uint32','cargo_ants_msgs/Origin','cargo_ants_msgs/Polyline[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type_tag,origin,polylines

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type_tag is None:
        self.type_tag = 0
      if self.origin is None:
        self.origin = cargo_ants_msgs.msg.Origin()
      if self.polylines is None:
        self.polylines = []
    else:
      self.type_tag = 0
      self.origin = cargo_ants_msgs.msg.Origin()
      self.polylines = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I3f.pack(_x.type_tag, _x.origin.ox, _x.origin.oy, _x.origin.oth))
      length = len(self.polylines)
      buff.write(_struct_I.pack(length))
      for val1 in self.polylines:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_2f.pack(_x.px, _x.py))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.origin is None:
        self.origin = cargo_ants_msgs.msg.Origin()
      if self.polylines is None:
        self.polylines = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.type_tag, _x.origin.ox, _x.origin.oy, _x.origin.oth,) = _struct_I3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polylines = []
      for i in range(0, length):
        val1 = cargo_ants_msgs.msg.Polyline()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = cargo_ants_msgs.msg.Point()
          _x = val2
          start = end
          end += 8
          (_x.px, _x.py,) = _struct_2f.unpack(str[start:end])
          val1.points.append(val2)
        self.polylines.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I3f.pack(_x.type_tag, _x.origin.ox, _x.origin.oy, _x.origin.oth))
      length = len(self.polylines)
      buff.write(_struct_I.pack(length))
      for val1 in self.polylines:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_2f.pack(_x.px, _x.py))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.origin is None:
        self.origin = cargo_ants_msgs.msg.Origin()
      if self.polylines is None:
        self.polylines = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.type_tag, _x.origin.ox, _x.origin.oy, _x.origin.oth,) = _struct_I3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polylines = []
      for i in range(0, length):
        val1 = cargo_ants_msgs.msg.Polyline()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = cargo_ants_msgs.msg.Point()
          _x = val2
          start = end
          end += 8
          (_x.px, _x.py,) = _struct_2f.unpack(str[start:end])
          val1.points.append(val2)
        self.polylines.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_I3f = struct.Struct("<I3f")
