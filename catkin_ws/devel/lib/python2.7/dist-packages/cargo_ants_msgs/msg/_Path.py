# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/Path.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cargo_ants_msgs.msg

class Path(genpy.Message):
  _md5sum = "6e7b6f79c7cbe4de3041322b72f3a98b"
  _type = "cargo_ants_msgs/Path"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 PICKUP=0
uint8 PLACEDOWN=1
uint8 ABORT=2
uint8 IDLE=3
uint8 mode

string container

Goal[] goals

================================================================================
MSG: cargo_ants_msgs/Goal
# A goal is specified as its (gx,gy) coordinate and heading gth (for
# "goal theta"). Additionally, dr is the radial tolerance, and dth the
# angular tolerance to be achieved. Specifying a negative number for
# either dr or dth disabled that particular tolerance. Thus, if you do
# no care about the heading with which you arrive at a goal, specify
# dth = -1 for example.  The goal message type is intended to be used
# as part of other messages such as Path.msg, thus we do not include
# the frame here as that should be the same for an entire array of
# goals.

float64 gx
float64 gy
float64 gth

# Radial accuracy of the goal. Specifying dr <= 0.0 means that you do
# not care about the goal position at all.
#
float64 dr

# Angular accuracy of the goal. Specifying dth <= 0.0 or >= M_PI means
# that orientation does not matter.
#
float64 dth


#later? bool go_forward
"""
  # Pseudo-constants
  PICKUP = 0
  PLACEDOWN = 1
  ABORT = 2
  IDLE = 3

  __slots__ = ['mode','container','goals']
  _slot_types = ['uint8','string','cargo_ants_msgs/Goal[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,container,goals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Path, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.container is None:
        self.container = ''
      if self.goals is None:
        self.goals = []
    else:
      self.mode = 0
      self.container = ''
      self.goals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.mode))
      _x = self.container
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.goals:
        _x = val1
        buff.write(_struct_5d.pack(_x.gx, _x.gy, _x.gth, _x.dr, _x.dth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.goals is None:
        self.goals = None
      end = 0
      start = end
      end += 1
      (self.mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.container = str[start:end].decode('utf-8')
      else:
        self.container = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goals = []
      for i in range(0, length):
        val1 = cargo_ants_msgs.msg.Goal()
        _x = val1
        start = end
        end += 40
        (_x.gx, _x.gy, _x.gth, _x.dr, _x.dth,) = _struct_5d.unpack(str[start:end])
        self.goals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.mode))
      _x = self.container
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.goals:
        _x = val1
        buff.write(_struct_5d.pack(_x.gx, _x.gy, _x.gth, _x.dr, _x.dth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.goals is None:
        self.goals = None
      end = 0
      start = end
      end += 1
      (self.mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.container = str[start:end].decode('utf-8')
      else:
        self.container = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goals = []
      for i in range(0, length):
        val1 = cargo_ants_msgs.msg.Goal()
        _x = val1
        start = end
        end += 40
        (_x.gx, _x.gy, _x.gth, _x.dr, _x.dth,) = _struct_5d.unpack(str[start:end])
        self.goals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5d = struct.Struct("<5d")
_struct_B = struct.Struct("<B")
