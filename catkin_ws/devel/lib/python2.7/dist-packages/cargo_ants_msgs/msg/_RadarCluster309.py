# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/RadarCluster309.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RadarCluster309(genpy.Message):
  _md5sum = "b9e4132423f7a90954d9f680a083d9d0"
  _type = "cargo_ants_msgs/RadarCluster309"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header            # timestamp in the header is the acquisition time of 
                         # the first ray in the scan.
                         #
                         # in frame frame_id, angles are measured around 
                         # the positive Z axis (counterclockwise, if Z is up)
                         # with zero angle being forward along the x axis

uint16 sensorId                         
uint8 id			# target number
float32 dist		# target range	[m]
float32 dist_rms	# target range standard deviation [m]
float32 angle		# target angle	[deg]
float32 angle_rms	# target angle standard deviation [deg]
uint8 angle_stat	# target angle status: 0-expanded target, 1-point target, 2-digital, 3-invalid
float32 vrel		# target relative velocity [m/s]
float32 vrel_rms	# target relative velocity standard deviation [m/s]
uint8 pdh0			# target false alarm probability [%]
float32 length		# target length	[m]
float32 width		# target width	[m]
uint8 type			# target type: 0-no target, 1-oncoming, 2-stationary, 3-traced (same direction)
float32 rcs			# radar cross-section [dBm^2]

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','sensorId','id','dist','dist_rms','angle','angle_rms','angle_stat','vrel','vrel_rms','pdh0','length','width','type','rcs']
  _slot_types = ['std_msgs/Header','uint16','uint8','float32','float32','float32','float32','uint8','float32','float32','uint8','float32','float32','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensorId,id,dist,dist_rms,angle,angle_rms,angle_stat,vrel,vrel_rms,pdh0,length,width,type,rcs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarCluster309, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensorId is None:
        self.sensorId = 0
      if self.id is None:
        self.id = 0
      if self.dist is None:
        self.dist = 0.
      if self.dist_rms is None:
        self.dist_rms = 0.
      if self.angle is None:
        self.angle = 0.
      if self.angle_rms is None:
        self.angle_rms = 0.
      if self.angle_stat is None:
        self.angle_stat = 0
      if self.vrel is None:
        self.vrel = 0.
      if self.vrel_rms is None:
        self.vrel_rms = 0.
      if self.pdh0 is None:
        self.pdh0 = 0
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.type is None:
        self.type = 0
      if self.rcs is None:
        self.rcs = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.sensorId = 0
      self.id = 0
      self.dist = 0.
      self.dist_rms = 0.
      self.angle = 0.
      self.angle_rms = 0.
      self.angle_stat = 0
      self.vrel = 0.
      self.vrel_rms = 0.
      self.pdh0 = 0
      self.length = 0.
      self.width = 0.
      self.type = 0
      self.rcs = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_HB4fB2fB2fBf.pack(_x.sensorId, _x.id, _x.dist, _x.dist_rms, _x.angle, _x.angle_rms, _x.angle_stat, _x.vrel, _x.vrel_rms, _x.pdh0, _x.length, _x.width, _x.type, _x.rcs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.sensorId, _x.id, _x.dist, _x.dist_rms, _x.angle, _x.angle_rms, _x.angle_stat, _x.vrel, _x.vrel_rms, _x.pdh0, _x.length, _x.width, _x.type, _x.rcs,) = _struct_HB4fB2fB2fBf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_HB4fB2fB2fBf.pack(_x.sensorId, _x.id, _x.dist, _x.dist_rms, _x.angle, _x.angle_rms, _x.angle_stat, _x.vrel, _x.vrel_rms, _x.pdh0, _x.length, _x.width, _x.type, _x.rcs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.sensorId, _x.id, _x.dist, _x.dist_rms, _x.angle, _x.angle_rms, _x.angle_stat, _x.vrel, _x.vrel_rms, _x.pdh0, _x.length, _x.width, _x.type, _x.rcs,) = _struct_HB4fB2fB2fBf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_HB4fB2fB2fBf = struct.Struct("<HB4fB2fB2fBf")
_struct_3I = struct.Struct("<3I")
