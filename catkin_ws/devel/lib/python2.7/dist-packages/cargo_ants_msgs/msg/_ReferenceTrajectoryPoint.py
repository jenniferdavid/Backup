# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/ReferenceTrajectoryPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReferenceTrajectoryPoint(genpy.Message):
  _md5sum = "60014944571a3abc70dee1ab6a3c83b0"
  _type = "cargo_ants_msgs/ReferenceTrajectoryPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 xx
float32 yy
float32 th
float32 xd
float32 yd
float32 thd
float32 xdd
float32 ydd
float32 thdd
"""
  __slots__ = ['xx','yy','th','xd','yd','thd','xdd','ydd','thdd']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       xx,yy,th,xd,yd,thd,xdd,ydd,thdd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReferenceTrajectoryPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.xx is None:
        self.xx = 0.
      if self.yy is None:
        self.yy = 0.
      if self.th is None:
        self.th = 0.
      if self.xd is None:
        self.xd = 0.
      if self.yd is None:
        self.yd = 0.
      if self.thd is None:
        self.thd = 0.
      if self.xdd is None:
        self.xdd = 0.
      if self.ydd is None:
        self.ydd = 0.
      if self.thdd is None:
        self.thdd = 0.
    else:
      self.xx = 0.
      self.yy = 0.
      self.th = 0.
      self.xd = 0.
      self.yd = 0.
      self.thd = 0.
      self.xdd = 0.
      self.ydd = 0.
      self.thdd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.xx, _x.yy, _x.th, _x.xd, _x.yd, _x.thd, _x.xdd, _x.ydd, _x.thdd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.xx, _x.yy, _x.th, _x.xd, _x.yd, _x.thd, _x.xdd, _x.ydd, _x.thdd,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.xx, _x.yy, _x.th, _x.xd, _x.yd, _x.thd, _x.xdd, _x.ydd, _x.thdd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.xx, _x.yy, _x.th, _x.xd, _x.yd, _x.thd, _x.xdd, _x.ydd, _x.thdd,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9f = struct.Struct("<9f")
