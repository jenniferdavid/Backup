# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cargo_ants_msgs/VehicleInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehicleInfo(genpy.Message):
  _md5sum = "0d9b3ce8e3717d2dabbb463d43c9608c"
  _type = "cargo_ants_msgs/VehicleInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 PICKING=0
uint8 PLACING=1
uint8 IDLE=2
uint8 ERROR=3
uint8 mode

string vehicle
string container

float64 vehicle_px
float64 vehicle_py
float64 vehicle_pth
"""
  # Pseudo-constants
  PICKING = 0
  PLACING = 1
  IDLE = 2
  ERROR = 3

  __slots__ = ['mode','vehicle','container','vehicle_px','vehicle_py','vehicle_pth']
  _slot_types = ['uint8','string','string','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,vehicle,container,vehicle_px,vehicle_py,vehicle_pth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.vehicle is None:
        self.vehicle = ''
      if self.container is None:
        self.container = ''
      if self.vehicle_px is None:
        self.vehicle_px = 0.
      if self.vehicle_py is None:
        self.vehicle_py = 0.
      if self.vehicle_pth is None:
        self.vehicle_pth = 0.
    else:
      self.mode = 0
      self.vehicle = ''
      self.container = ''
      self.vehicle_px = 0.
      self.vehicle_py = 0.
      self.vehicle_pth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.mode))
      _x = self.vehicle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.container
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.vehicle_px, _x.vehicle_py, _x.vehicle_pth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle = str[start:end].decode('utf-8')
      else:
        self.vehicle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.container = str[start:end].decode('utf-8')
      else:
        self.container = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vehicle_px, _x.vehicle_py, _x.vehicle_pth,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.mode))
      _x = self.vehicle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.container
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.vehicle_px, _x.vehicle_py, _x.vehicle_pth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle = str[start:end].decode('utf-8')
      else:
        self.vehicle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.container = str[start:end].decode('utf-8')
      else:
        self.container = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vehicle_px, _x.vehicle_py, _x.vehicle_pth,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_3d = struct.Struct("<3d")
